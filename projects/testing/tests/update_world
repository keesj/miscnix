#!/usr/bin/expect -f
#

#
# Parse arguments
#
set image minix.postinst.8g.tmp.img
set send_human {.1 .3 1 .05 2}
set passwd "dev"
set timeout 5

if { $argc > 0 } {
	puts "Parsing arguments"
	set counter 0
	while {$counter < $argc} {
		if { [lindex $argv $counter] == "--image" }  {
			set counter [expr {$counter +1}]
			set image [lindex $argv $counter]
			
		}
		set counter [expr {$counter +1}]
	}
}

#
# Try and read password from a file called ~/bin/.minix.passwd
# if that is not present inform the user we are using a default
# password. (This becomes nasty when we have ssh installed)
#
if { [file exists "~/bin/.minix.passwd" ] == 1} {
        puts "**Reading password from file **"
        set fd [open "~/bin/.minix.passwd" "r"]
        set passwd [read $fd]
        close $fd
} 

proc exit_strategy {} {
	puts "\nExit strategy\n"
	send "shutdown\n"
	set timeout 5
	exit 1
}

spawn qemu-system-x86_64 --enable-kvm -m 2048 -hda $image -curses -net nic,model=e1000 -net user


#
#--- Welcome to MINIX 3. This is the boot monitor. ---
#expect "\\-\\-\\- Welcome to MINIX 3. This is the boot monitor. \\-\\-\\-"

#
#Check we have a normal boot loader
#1. Start MINIX 3
expect "1. Start MINIX 3"

expect "Choose an option; RETURN for default; SPACE to stop countdown." {
	send "\n"
}


# when this script is stated the previous one probably has installed openssh
# and ssh keys will be generated
set timeout 120

#
for {} 1 {} {
	puts "Waiting for a prompt"
	expect {
		#minix login: 
		#but later if it worked ip-address login:
		"login:" { 
			send "root\n" 
			break
		}
		"dirty, performing fsck" {puts "resetting timeout as the file system in dirty" }
		timeout {
			puts "Failed to catch login command"
			exit_strategy
		}
	}
}

set timeout 20
expect {
	"Password:" { 
		send -h "$passwd\n" 
	}
	timeout {
		puts "Failed to catch login command"
		exit_strategy
	}
}

set timeout 5
expect "#"


#
# put a run command in /tmp that echoes RESULT-OK or RESULT-FAIL based on the 
# return value of the command launched
#
#expect -re $
# the shell can't handle all this output at once so sending it as "human"
send -h  "echo '#!/bin/sh' > /tmp/runcmd.sh ; echo 'if $* ; then echo RESULT-OK ; else echo RESULT-FAIL ; fi' >> /tmp/runcmd.sh ; chmod +x /tmp/runcmd.sh\n"
expect "#"



#read the full buffer so the next line does not match RESULT-FAIL
set timeout 600
expect -re $
# passwd
send -h "/tmp/runcmd.sh /root/world-update.sh\n"
for {} 1 {} {
	expect {
		"RESULT-OK" { 
			puts ""
			break
		}
		"RESULT-FAIL" { 
			puts "Test failed"
			exit_strategy
		}
		"/" {
		}
		timeout {
			puts "Failed to run command"
			exit_strategy
		}
	}
}
expect -re $

set timeout 20
#shutdown
send "shutdown\n"
expect  {
	"Choose an option; RETURN for default; SPACE to stop countdown." { 
		puts "\nTest worked\n"
		exit 0
	}
	"Press Ctrl-B to configure iPXE" {
		puts "\nWorked\n"
		exit 0
		
	}
}
exit 1
